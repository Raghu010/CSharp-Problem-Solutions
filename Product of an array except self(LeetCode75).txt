using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

public class Solution
{
    /*Problem statement: Product Except self leet-code 75 problem solution without optimization.*/
    public int[] ProductExceptSelf(int[] nums)
    {
        Queue<int> queue = new Queue<int>();
        List<int> List = new List<int>();
        int[] output = new int[nums.Length];
        int fncOutput = 0;

        for (int i = 0; i < nums.Length; i++)
        {
            queue.Enqueue(nums[i]);
        }

        for (int j = 0; j < queue.Count; j++)
        {
            List.Add(queue.Dequeue());
            fncOutput = Product(queue);
            output[j] = fncOutput;
            queue.Enqueue(List[j]);
        }
        return output;
    }

    public int Product(Queue<int> intQueue)
    {
        int prod = 1;
        for (int i = 0; i < intQueue.Count; i++)
        {
            if (i < intQueue.Count)
            {
                prod = prod * intQueue.ElementAt(i);
            }
        }
        return prod;
    }
}
